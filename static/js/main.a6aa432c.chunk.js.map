{"version":3,"sources":["age.ts","Graph.tsx","index.tsx"],"names":["physicalToMental","base","mental","i","rec","physical","Math","floor","Graph","highlight","draw","useMemo","ctx","widthPX","heightPX","width","max","height","log10","save","setTransform","beginPath","moveTo","lineTo","closePath","miterLimit","stroke","restore","arc","PI","fillStyle","fill","lineWidth","clearRect","drawGraph","canvasRef","useDrawingCanvas","className","ref","App","useState","moment","diff","age","setAge","mentalAge","htmlFor","id","type","value","onChange","e","parseInt","target","msd","numNines","pow","mentalToPhysical","ReactDOM","render","document","getElementById"],"mappings":"oNAKaA,EAAoB,WAE/B,IAF+C,IAAfC,EAAc,uDAAP,GACjCC,EAAmB,GAChBC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAOC,GAAKA,EAEdD,EAAM,IAAQ,EAWd,IARA,IAAME,EAAM,SAANA,EAAOC,GAIX,OAHKH,EAAOG,IAAkC,IAArBH,EAAOG,KAC9BH,EAAOG,GAAYD,EAAIE,KAAKC,MAAMF,EAAWJ,IAAUI,EAAWJ,GAE7DC,EAAOG,IAIPF,EAAI,EAAGA,EAAI,IAAMA,IACxBC,EAAID,GAGN,OAAOC,EApBwB,G,eCoDlBI,EATgC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1CC,EAAOC,mBAAQ,WACnB,OA9Cc,SAACF,GACjB,OAAO,SAACG,EAAKC,EAASC,GACpB,IAAMC,EAAQT,KAAKU,IAAgB,EAAZP,EAAe,KAChCQ,EAASX,KAAKC,MAAM,EAAID,KAAKY,MAAMH,IAGzCH,EAAIO,OAEJP,EAAIQ,aAAaP,EAAUE,EAAO,EAAG,GAAID,EAAWG,EAAQ,EAAGH,GAC/DF,EAAIS,YACJT,EAAIU,OAAO,EAAG,GACd,IAAK,IAAInB,EAAI,EAAGA,GAAKY,EAAOZ,IAC1BS,EAAIW,OAAOpB,EAAGH,EAAiBG,IA0BjC,OAxBAS,EAAIU,OAAO,EAAG,GACdV,EAAIY,YACJZ,EAAIa,WAAa,EACjBb,EAAIc,SACJd,EAAIe,UAGJf,EAAIO,OACJP,EAAIS,YACJT,EAAIgB,IACDnB,EAAYI,EAAWE,EACxBD,EAAYd,EAAiBS,GAAaK,EAAYG,EACtD,EACA,EACA,EAAIX,KAAKuB,IAEXjB,EAAIY,YACJZ,EAAIkB,UAAJ,wBACAlB,EAAImB,OACJnB,EAAIoB,UAAY,EAChBpB,EAAIc,SAEJd,EAAIe,UAEG,WACLf,EAAIqB,UAAU,EAAG,EAAGpB,EAASC,KAOxBoB,CAAUzB,KAChB,CAACA,IACE0B,EAAYC,YAAiB1B,GAEnC,OAAO,4BAAQ2B,UAAU,QAAQC,IAAKH,KC/ClCI,EAAgB,WAAM,MAEJC,mBAASC,MAASC,KAAKD,IAAO,CAAC,KAAM,EAAG,IAAK,UAFzC,mBAEnBE,EAFmB,KAEdC,EAFc,KAKpBC,EAAY7C,EAAiB2C,GAEnC,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,2BAAOS,QAAQ,YAAf,gBACA,2BACEC,GAAG,WACHC,KAAK,SACLC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAOtC,KAAKU,IAAI,EAAGoC,SAASD,EAAEE,OAAOJ,MAAO,UAG/D,yBAAKZ,UAAU,cACb,2BAAOS,QAAQ,UAAf,cACA,2BACEC,GAAG,SACHC,KAAK,SACLC,MAAOJ,EACPK,SAAU,SAAAC,GACRP,EAAOtC,KAAKU,IAAI,EFEE,SAAC6B,GAAkC,IAAf5C,EAAc,uDAAP,GACnDqD,EAAMT,GAAa5C,EAAO,GAC1BsD,EAAWjD,KAAKC,MAAMsC,GAAa5C,EAAO,IAEhD,OAAQqD,EAAM,GAAKhD,KAAKkD,IAAIvD,EAAMsD,GAAY,EENfE,CAAiBL,SAASD,EAAEE,OAAOJ,eAK9D,kBAAC,EAAD,CAAOxC,UAAWkC,MAKxBe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a6aa432c.chunk.js","sourcesContent":["/**\n * Returns the sum of the digits of a number. (defaults to base ten)\n *\n * @param physicalAge The age in years\n */\nexport const physicalToMental = ((base = 10) => {\n  const mental: number[] = []\n  for (let i = 0; i < base; i++) {\n    mental[i] = i\n  }\n  mental[NaN] = 0\n\n  /** This is recursive */\n  const rec = (physical: number) => {\n    if (!mental[physical] && mental[physical] !== 0) {\n      mental[physical] = rec(Math.floor(physical / base)) + (physical % base)\n    }\n    return mental[physical]\n  }\n\n  // pre-calculate\n  for (let i = 0; i < 2000; i++) {\n    rec(i)\n  }\n\n  return rec\n})()\n\n/**\n * Returns the smallest number whose sum of digits (defaults to base ten) is the\n * target.\n *\n * @param mentalAge The target number\n * @param base The base of the number.\n */\nexport const mentalToPhysical = (mentalAge: number, base = 10) => {\n  const msd = mentalAge % (base - 1)\n  const numNines = Math.floor(mentalAge / (base - 1))\n\n  return (msd + 1) * Math.pow(base, numNines) - 1\n}\n","import React, { useMemo } from 'react'\nimport { physicalToMental } from './age'\nimport useDrawingCanvas, { DrawingMethod } from 'react-hooks-use-drawing-canvas'\n\nconst drawGraph = (highlight: number): DrawingMethod => {\n  return (ctx, widthPX, heightPX) => {\n    const width = Math.max(highlight * 2, 100)\n    const height = Math.floor(9 * Math.log10(width))\n\n    // draw the graph\n    ctx.save()\n    // we want to show the years from 1 to 100 evenly across the page\n    ctx.setTransform(widthPX / width, 0, 0, -heightPX / height, 0, heightPX)\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    for (let i = 0; i <= width; i++) {\n      ctx.lineTo(i, physicalToMental(i))\n    }\n    ctx.moveTo(0, 0)\n    ctx.closePath()\n    ctx.miterLimit = 1\n    ctx.stroke()\n    ctx.restore()\n\n    // draw the highlight\n    ctx.save()\n    ctx.beginPath()\n    ctx.arc(\n      (highlight * widthPX) / width,\n      heightPX - (physicalToMental(highlight) * heightPX) / height,\n      7,\n      0,\n      2 * Math.PI\n    )\n    ctx.closePath()\n    ctx.fillStyle = `rgba(255,255,255,0.6)`\n    ctx.fill()\n    ctx.lineWidth = 3\n    ctx.stroke()\n\n    ctx.restore()\n\n    return () => {\n      ctx.clearRect(0, 0, widthPX, heightPX)\n    }\n  }\n}\n\nconst Graph: React.FC<{ highlight: number }> = ({ highlight }) => {\n  const draw = useMemo(() => {\n    return drawGraph(highlight)\n  }, [highlight])\n  const canvasRef = useDrawingCanvas(draw)\n\n  return <canvas className=\"Graph\" ref={canvasRef} />\n}\n\nexport default Graph\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport moment from 'moment'\nimport { physicalToMental, mentalToPhysical } from './age'\nimport './index.css'\nimport Graph from './Graph'\n\nconst App: React.FC = () => {\n  /** Current physical age */\n  const [age, setAge] = useState(moment().diff(moment([1958, 9, 2]), 'years'))\n\n  /** Current mental age */\n  const mentalAge = physicalToMental(age)\n\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\">\n        <div className=\"physical age\">\n          <label htmlFor=\"physical\">Physical Age</label>\n          <input\n            id=\"physical\"\n            type=\"number\"\n            value={age}\n            onChange={e => setAge(Math.max(1, parseInt(e.target.value, 10)))}\n          />\n        </div>\n        <div className=\"mental age\">\n          <label htmlFor=\"mental\">Mental Age</label>\n          <input\n            id=\"mental\"\n            type=\"number\"\n            value={mentalAge}\n            onChange={e => {\n              setAge(Math.max(1, mentalToPhysical(parseInt(e.target.value))))\n            }}\n          />\n        </div>\n      </div>\n      <Graph highlight={age} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}